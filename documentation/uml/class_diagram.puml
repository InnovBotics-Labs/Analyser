@startuml Budget Analyser Class Diagram

' Package definitions
package "source.view" {
    class Ui_Widget {
        + setupUi(Widget)
        + check_password()
        + open_dashboard()
        + retranslateUi(Widget)
    }
    
    class Ui_MainWindow {
        + setupUi(MainWindow)
        + retranslateUi(MainWindow)
    }
    
    class InputDisplayApp {
        + initUI()
        + process_input()
    }
    
    class ExpenseReport {
        + initUI()
    }
}

package "source.model" {
    class Statements {
        - __original_statements: OriginalStatement
        + transactions: pd.DataFrame
        + collect_transactions()
        + {static} future_method()
    }
    
    class OriginalStatement {
        + from_credit_cards
        + from_checking_accounts
    }
    
    class StatementFormatter {
        + account_name: str
        + statement: pd.DataFrame
        + get_desired_format()
    }
}

package "source.controller" {
    class Report {
        + statement: pd.DataFrame
        + earnings()
        + expenses()
        + expenses_category()
        + expenses_sub_category()
    }
    
    class Processor {
        - __raw_transactions: pd.DataFrame
        + processed_transactions: pd.DataFrame
        + process_transactions()
        - _add_sub_category()
        - _add_category()
        - _add_c_or_d()
        + {static} mapper(content, hash_map)
    }
}

package "source.framework.library" {
    class Logger {
        - _instance
        - _initialized: bool
        + {static} debug(message)
        + {static} info(message)
        + {static} error(message)
        + {static} critical(message)
        + {static} exception(message)
        + {static} table(table, header)
        - {static} __get_logger()
        - {static} __log(level, tag, message)
        + {static} get_tag_info(frame_index)
    }
    
    class PandasToolkit {
        + {static} filter_rows(df, column_name, condition)
        + {static} add_column(df, column_name, source_column, func)
        + {static} concat_dataframes(df1, df2)
    }
    
    class JsonHandler {
        + file_path: str
        + data: dict
    }
}

' Main application
class main_be {
    + {static} main()
}

' Relationships
main_be --> Statements: creates
main_be --> Processor: creates
main_be --> Report: creates

Ui_Widget --> Ui_MainWindow: opens dashboard

Statements --> OriginalStatement: uses
Statements --> StatementFormatter: uses
Statements ..> PandasToolkit: uses
Statements ..> Logger: logs with

Processor --> JsonHandler: uses for mapping
Processor ..> PandasToolkit: uses
Processor ..> Logger: logs with

Report ..> PandasToolkit: uses

InputDisplayApp --> ExpenseReport: creates

' Singleton pattern for Logger
Logger --> Logger: singleton instance

@enduml